# # # # # Directories # # # # # # # # # #
#
ROOT_DIR := $(realpath ${CURDIR}/..)
# directory for the building
BUILD_DIR := @BUILD_DIR@
# directory for the executable
BIN_DIR := ${ROOT_DIR}/@BIN_DIR@
TEMP_DIR := .temp

TARGET := @NTT_TARGET@
TEST_TARGET := @TEST_TARGET@

PGEN_DIR := ${ROOT_DIR}/@PGEN_DIR@

PGEN := @PGEN@

SRC_DIR := ${ROOT_DIR}/@SRC_DIR@
BUILD_SRC_DIR := @SRC_DIR@

# external libraries
EXT_DIR := ${ROOT_DIR}/@EXTERN_DIR@

# # # # # Settings # # # # # # # # # # # #
#
DEBUGMODE := @DEBUGMODE@
VERBOSE := @VERBOSE@

DEFINITIONS := @DEFINITIONS@

ifeq ($(strip ${VERBOSE}), y)
	HIDE =
	PREPFLAGS = -DVERBOSE -Werror
else
	HIDE = @
endif

# 3-rd party library configurations
KOKKOS_PATH := ${EXT_DIR}/kokkos
KOKKOS_BUILD_DIR = ${BUILD_DIR}/kokkos/

KOKKOS_ARCH := @KOKKOS_ARCH@
KOKKOS_DEVICES := @KOKKOS_DEVICES@
KOKKOS_OPTIONS := @KOKKOS_OPTIONS@

KOKKOS_CUDA_OPTIONS := @KOKKOS_CUDA_OPTIONS@
KOKKOS_CXX_STANDARD := @CXXSTANDARD@

PREPFLAGS := ${PREPFLAGS}

# # # # # Compiler and flags # # # # # # #
#
CXX := @COMPILER@
LINK := ${CXX}
CXXSTANDARD := -std=@CXXSTANDARD@
ifeq ($(strip ${DEBUGMODE}), n)
	# linker configuration flags (e.g. optimization level)
	CFLAGS := @RELEASE_CFLAGS@
else
	CFLAGS := @DEBUG_CFLAGS@
endif

# warning flags
WARNFLAGS := @WARNING_FLAGS@

# custom preprocessor flags
PREPFLAGS := $(PREPFLAGS) @PRECISION@ -DMETRIC=@METRIC@_METRIC -DSIMTYPE=@SIMTYPE@_SIMTYPE

CFLAGS := $(CFLAGS) $(WARNFLAGS) $(PREPFLAGS)
LIBS :=

# # # # # Targets # # # # # # # # # # # # # #
#
.PHONY: help ntt clean demo cleanlib pgenCopy

default: help demo

# linking the main app
ntt : pgenCopy ${BIN_DIR}/${TARGET}
	@echo [M]aking $@

ifeq (${PGEN},)
PGEN := dummy
endif

# Problem generator
pgenCopy: ${SRC_DIR}/${TEMP_DIR}/problem_generator.cpp ${SRC_DIR}/${TEMP_DIR}/problem_generator.hpp

${SRC_DIR}/${TEMP_DIR}/problem_generator.cpp : ${PGEN_DIR}/${PGEN}.cpp
	$(HIDE)mkdir -p ${SRC_DIR}/${TEMP_DIR}
	$(HIDE)cp $< $@

${SRC_DIR}/${TEMP_DIR}/problem_generator.hpp : ${PGEN_DIR}/${PGEN}.hpp
	$(HIDE)mkdir -p ${SRC_DIR}/${TEMP_DIR}
	$(HIDE)cp $< $@

help:
	@echo
	@echo "usage: \`make [ ntt | vis | demo ]\`"
	@echo
	@echo "cleanup: \`make clean\`"
	@echo

demo:
	@echo "[C]ompile command:"
	@echo ${compile_command} -c \<.cpp\> -o \<.o\>
	@echo
	@echo "[L]ink command:"
	@echo ${link_command} \<.o\> $(LIBS) -o \<EXE\>

# # # # # File collection # # # # # # # # # # #
#
# Src files
simtype := @SIMTYPE@
simtype := $(shell echo $(simtype) | tr A-Z a-z)
SRCS := $(wildcard ${SRC_DIR}/*.cpp ${SRC_DIR}/*.c)
SRCS := $(SRCS) ${SRC_DIR}/${TEMP_DIR}/problem_generator.cpp
SRCS := $(SRCS) $(shell find ${SRC_DIR}/framework -name "*.cpp" -o -name "*.c")
SRCS := $(SRCS) $(shell find ${SRC_DIR}/${simtype} -name "*.cpp" -o -name "*.c")
SRCS := $(filter-out ${SRC_DIR}/main.cpp, $(SRCS))
OBJS := $(subst ${SRC_DIR},${BUILD_SRC_DIR},$(SRCS:%=%.o))
DEPS := $(OBJS:.o=.d)

# Main app
MAIN_SRCS := ${SRC_DIR}/main.cpp
MAIN_OBJS := $(subst ${SRC_DIR},${BUILD_SRC_DIR},$(MAIN_SRCS:%=%.o))
MAIN_DEPS := $(MAIN_OBJS:.o=.d)

INC_DIRS := $(shell find ${SRC_DIR} -type d) ${SRC_DIR}/${TEMP_DIR} ${EXT_DIR}/plog/include ${EXT_DIR}/doctest/doctest ${EXT_DIR} ${EXT_DIR}/rapidcsv/src
INCFLAGS := $(addprefix -I,${INC_DIRS})

# # # # # Link/compile # # # # # # # # # # # # # #

include ${KOKKOS_PATH}/Makefile.kokkos
OBJS := $(OBJS) $(KOKKOS_LINK_DEPENDS)
CFLAGS := $(CFLAGS) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS)
LDFLAGS := $(LDFLAGS) $(KOKKOS_LDFLAGS)
LIBS := $(LIBS) $(KOKKOS_LIBS)
CFLAGS := $(filter-out ${CXXSTANDARD}, $(CFLAGS))

compile_command := ${CXX} ${CXXSTANDARD} $(INCFLAGS) $(DEFINITIONS) $(CFLAGS) -MMD
link_command := ${LINK} $(LDFLAGS)

${BIN_DIR}/${TARGET} : $(MAIN_OBJS) $(OBJS)
	@echo [L]inking $(notdir $@) from $<
	$(HIDE)mkdir -p ${BIN_DIR}
	$(HIDE)${link_command} $^ -o $@ $(LIBS)

${BUILD_SRC_DIR}/%.o : ${SRC_DIR}/%
	@echo [C]ompiling \`src\`: $(subst ${ROOT_DIR}/,,$<)
	$(HIDE)mkdir -p $(dir $@)
	$(HIDE)${compile_command} -c $< -o $@

include ${ROOT_DIR}/Tests.mk
include ${ROOT_DIR}/Docs.mk

# to ensure recompilation when header files are changed
-include $(DEPS) $(MAIN_DEPS)

# for nttiny />
NTTINY_DIR := @NTTINY_DIR@
VIS_DIR := ${ROOT_DIR}/@VIS_DIR@
include ${ROOT_DIR}/Nttiny.mk
# </ for nttiny

clean:
	rm -rf ${ROOT_DIR}/${BUILD_DIR}/${BUILD_SRC_DIR} ${BUILD_TEST_DIR} ${BUILD_VIS_DIR}
	rm -rf ${BIN_DIR}
	rm -rf ${SRC_DIR}/${TEMP_DIR}

cleanlib: kokkos-clean
	rm -rf {BUILD_DIR}/Kokkos*
